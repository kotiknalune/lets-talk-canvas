Hey, guys. So let’s talk about canvas, like the title says, shall we? So this gif really does show the learning curve for canvas element. You go from usual cycles and functions into understanding of the shaders, texture, physics and particles are. Yikes. This is how I felt when I first Googled what the element does. But don’t fret. I’ll be here to guide you through the process of understanding how you can use canvas and learn what it is capable of. The contents of this presentation will be what is canvas? The general overview of browser game dev, the 2D games, 3D games in their libraries and engines, and a little bit of what is the AR and VR situation right now and I’ll leave you with a little bit of resources if you wish to pursue this topic any further. So let’s go. Nosedive into what is canvas.

It was introduced late in 2014 and is a 2D drawing API added to the documentation and in our editor it’s going to look a little bit like this. This is the simplest implementation you can find. That’s all the CSS and HTML you will need. Body at the margin of zero and the width of 100 percent just to have it full screen. And the only HTML you have is again this element aside from, you know, the head and the body. All of the magic happens in the JS. And in these six lines of code, what you’ll be doing is creating a 40 radius circle. And that’s really wonderful. So in the general overview, together with the cameras API, the canvas element can be used for animation, data visualization, game graphics, photos and video manipulation and what the video is, it’s really cool because you can actually have a green-screen effect. And I’m not only talking about this, but I think it’s cool that, you know.

It’s supported in many browsers, even in an Explorer nine. But you do have to check for all of the features because it doesn’t work, all of them. Keep in mind that canvas element and canvas API are like conjoined twins, they’re separate - but not really. The canvas graphics include the shapes, elements and media. As for the shapes, you can see that we’re only using the general basic geometric shapes which are squares, circles and lines. And they’re all going into the update loop. And that’s how you animate them. You can also have texts, gradients. And like I mentioned before, the images and video, it’s up to you to combine these elements to make something not trivial and something cool, right?

Like in this example, this is what you can do with canvas. It’s a hiring site for a dev company. And we’re going to take a look at how it works. Unfortunately, I can’t. If you were to take a look at the source code, you will see that all of this action is happening on the canvas element. And aside from this text here, I hope you can see the cursor, It’s all happening inside the canvas. I just want to show you how cool this element can be, it can create really awesome scenes. So mainly canvas element can be used to build web applications for all devices, not just desktops, and it can be used to create beautiful sites. So I do hope this actually got your attention. Also, I wanted to mention that… its Canvas - all, really… And that is a wrong approach because if you really have the imagination, you can do pretty much anything if you want to make a game. Take a look at this awesome pure CSS this game by Mira said. I really do hope I’m pronouncing that name right. If not, I’m very sorry. In this presentation, I will be focusing on the gaming side of canvas. It does go to point now that you can, like I said, pretty much use anything if you’re being creative. And I’d encourage you to take a look at this Adventure time maze after the presentation.

And going into browser gamedev. As I mentioned, I will be focusing on the game dev side of canvas. So let’s see what’s all that about in the first half before we nosedive into that, I wanted to mention anything but games. What should you use when creating dynamic content for your website? You could use canvas , SVG’s or css/dom elements. The way you’d be choosing them is, if you wanted to create charts, graphs or dynamic diagrams - you’d be using canvas. It does have less memory, but you will be ending up with a lot, a lot of code. So be prepared for that. SVG’s are great using in tandem with Adobe Illustrator. If you have ready shapes that you want to render and using CSS and DOM elements would be great for 3D transforms or large static areas that you wish to animate. Now with that out of the way, let’s proceed into what is the, you know, the whole idea of web browser game dev.

My first question when I went into this journey was I wanted to understand why should I investment time learning the ways of Canada’s API, WebGL, different libraries, if there is such a thing as Unity, Unity or even Unreal engine. The The canvas/ webGL games need to be fast and flexible. If you’re looking at a cross platform gaming, unity is definitely your friend. But for the games that target the web you have to be conscious of the file size and the stability and the the moment the WebGL tech from the big players like unity is mediocre at best. But there was, of course, my opinion. But there’s a lot of crashing and instability on every demo I have seen so far. And these are only demos. I mean, don’t mind the general long term process of production, but it is getting better and hopefully in future we’ll have something quite similar to webGL but for now, I would really highly recommend using the above tandem as per not unity.

And you can see an example here. I do hope this is rendering… that if we compare a simple spinning cube animation, Babylon,js would be a few bytes and would load instantly and can integrate with all other HTML elements that interact vie JavaScript events. Unity takes up a full page, takes ages to read, and it’s mean minimum is 20 megabytes in file sizes. Babylon is a powerful and lightweight engine and would more than be able to keep up a fully deployed RPG online game. But it still doesn’t match the versatility of unity. So really what we have to do is to understand what are you creating and to see which one you want to sacrifice. The stability or file size or the rendering ability of your game.

Going into 2D. 2D and 3D games are interlinked in a way would have colossal differences. when it comes to development. And yes, there are numerous 2D libraries and engines to choose from aside from vanilla, which is, you know, webGL and Canvas API, but bear down with me for now with the basics, we’ll talk about the libraries later. Canvas API largely focuses on 2D graphics, and the webGL it uses the canvas element, but it can draw hardware-accelerated 2D and 3D graphics.

WebGL was released in 2011. It was the first time that web platform was exposed to 3D rendering and the only issues it did have was hardware problems. For instance, if you would lack the required GPU, that would prevent GL running in some cases. But basically it’s a JavaScript API that allows us to render awesome 3D and 2D graphics. There are two versions to it. The first version is supported throughout all browsers on both desktop and mobile platforms, and it has support from all the browsers mentioned above. And when the second version came, everything really did change because Safari, as you can see from the red column, declared it won’t be able to support the new version of WebGL. And it is rumored to have been developing a native engine, which will probably be released in the same year that Half-Life three, which is… well, we’re still waiting.

And going into CanvasAPI versus webGL, there there’s a general criteria for evaluation. I asked myself, is there any reason except performance for using webGL instead of 2D canvas, for 2D games and apps? And looking at this question another way. When does a developer choose one technology over another? I’ll discuss the differences between canvas and webGL regarding these qualities. It really does integrate with an already built system. It’s easier to use. It’s faster. What’s the production cost and which one is more platform independent? In my own personal view, the biggest advantage is the programmability of the pipeline and the performance. For example, let’s say you are drawing 2 boxes. It’s one to box the other and one has hidden… some GL implementation has tools for disregarding the hidden box and that would be quite, quite useful.

As for the implementation. They are both JS API, which makes them quite similar and the easier one would be with… if you’re using a library then of course we’ll go with canvas API. Going from scratch, I would definitely suggest using webGL that will really speed up your coding and really does depend on the library you’re choosing. If you write code from zero, the Canvas API is much easier to learn and understand it requires minimal math, knowledge and development’s fast and straightforward. Web GL is definitely faster and has more capabilities. It’sa native 3D API that gives you full access to the rendering pipeline that works with 2D too. The effects are more tweak-able, faster and really with webGL you have no limit. That, of course, brings us down to the costs, which really rises because of the aforementioned. So Canvas API does have a little bit lower cost of production. As for the platform, they are virtually the same. Then again, be it Canvas API api or webGL, being buried under a wall of self-made bulky bicycle’s and crutches is no ones dream come true… Because you really wouldn’t want to be doing this whole vanilla.

Thus came the libraries. I paired it out with 3D games because really no one will be doing 3D games and webGL just alone without using any libraries because, writing your own physics, that would be, well, let’s say it would be just hard… There are two big daddy frameworks and in the scope of this this presentation, we have Babylon.js and we have the Three.js There’s a lot of other great framework, engines and library, we’ll discuss them a little bit later. But these two are the big towers. Babylon JS is the most recent newcomer, it came on in the summer of 2013 and it was made by the minds of Microsoft. It was introduced alongside the Explorers 11 first official release of Web GL official support and it’s a beautiful, powerful engine with augmented, mixed and virtual reality tools. It has a node material editor, which is something… if you have ever used Blender, you know how useful that is. And it also comes with about babylon Native. Which means you will be able to create your web apps or games for any platform of your desire.

Three.js has gotten a head-start in 2009, and it was written in ActionScript before it was translated into JS. ActionScript is something we used for Flash before the canvas came along. And having been created before Web G.L., it has the unique convenience of being a marginal rendering interface, allowing it to be used with SVG, and HTML5 canvas elements in addition to WebGL. It was really created with one goal in mind, using web-based renderers for creating GPU enhanced 3D graphics and animations. So this framework really has a very broad approach with graphics and it can make very flexible, beautiful designs like I showed you in the website before. And it’s a great tool for general purpose web animations like logos or modelling applications. There are other’s of course, there’s a numerous amount of game engines, libraries and frameworks. The general knowledge of finding the best library for you is completely up to you. You are the one who knows what kind of game you want to make and the level of understanding of internal game architecture. So please go through the list, review game engines and pick the ones that sounds like the best fit for you and your needs. But some honorable mentions, of course, are the Melon JS, Physics, Phase, Matter, Pixie… I mean, everything that I kind of put out here is definitely my favorites.

Melon JS jis a 2D focused game engine. It’s very beginner-friendly. Something I recommend you look up to you’re a complete beginner in the whole canvas situation. And it’s quite powerful too. The ct.js has its own dev environment and a good bonus - it comes with a moderately well written Russian documentation. Phase JS, has canvas support for those devices that do not support webGL, like safari browser, for instance, and it’s an engine geared towards 2D game development. It has a lot of plugins which are not free, but there are quite awesome so you might actually want to invest a dime.

Pixie JS is an amazingly flexible and powerful 2D visualization library. It’s made with a purpose of building beautiful web experience is not just games. So do look that one up if you want to make a website like I just showed you in the example before. The Physics and Matter JS are incredible libraries that focus on the physics aspects of the object interaction. You can use these libraries for game development or for any other type of simulation you might want to create. I do strongly recommend visiting their demo pages because I feel you really will feel the full power of the force. And these would be my favorites… and the A frame I will discuss a little bit later.

And the final topic is the VR/AR. Finally, there’s a newest niche added in early 2014 to our browsers. It’s the virtual and augmented reality. It’s made possible with WebVR. It’s an experimental JavaScript API that enables applications to interact with virtual reality devices such as HTC, Oculus Rift, Google Cardboard and add its all into out web browser… and as for my favorite I’ll be showing you the A-Frame. It’s one of the several, but a personal favorite due to ease of use and a comprehensive documentation. I really do hope this is going to work… Yes, now it works great. So as you can see, this is something we can create with this library. So let’s see if it’s going to work. Yep. Cool.

So using this with your virtual reality headset or even, you know, a card…, as I said Google Cardboard. There’s this button right here, like the glasses. And I did try this. Unfortunately, I cannot show you in the presentation, but I do urge you to look this one up. It’s called a-frame. And there’s a lot of cool demos. Pretty inspiring for your next creation.

And the resources for this thing, I wanted to add a little just a little bit of links, because I know this is really a huge topic. And if I were to add for everything I mentioned, that would be a…. that would be a wall of text. So a couple of… I’ll leave you useful things like Canvas Deep Dive is a great book. The Handbook is also very, very comprehensive for beginners. WebGL fundamentals is really anything you need to know about what webGL is and the crash course is a YouTube video that really covers all the basics. And if you do want to go further then, well, good luck to you. And that would be the game over. Thank you for your time. And if you do have any further questions, please feel free to ask!